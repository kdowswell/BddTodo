<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
	var namespaceOfBuilders = "BddTodo.Tests._Infrastructure.Builders";
	var project = GetProjectContainingFile("BddTodoDbContext.cs");
	var dtoTypes = GetClassesOf(project).Where(c => c.Namespace.Name.Contains("BddTodo.Data.Models") & !c.Name.EndsWith("Enum")).ToList();	
#>
using System;
using System.Linq;
using Bogus;
using NetTopologySuite.Geometries;

namespace <#=namespaceOfBuilders #>
{
    public class Build
    {
		<# 
		PushIndent("\t");
		foreach(var dtoType in dtoTypes)
		{
			PushIndent("\t");
			#>public static <#= dtoType.Name #>Builder <#= dtoType.Name #> => new <#= dtoType.Name #>Builder();
<#
			PopIndent();
		}
		PopIndent();
		#>
    }

	public abstract class Builder<TDto>
    {
        protected TDto dto;

        public Builder()
        {
            dto = Activator.CreateInstance<TDto>();
            AutoGeneratedDefaults();
			Defaults();
        }

        protected virtual void AutoGeneratedDefaults() {
        }

		protected virtual void Defaults() {
        }
        
        public TDto Build()
        {
            return dto;
        }
    }
	<# 
	foreach(var dtoType in dtoTypes)
	{
		#>

	public partial class <#= dtoType.Name #>Builder : Builder<<#= dtoType.Namespace.Name #>.<#= dtoType.Name #>>
	{

        protected override void AutoGeneratedDefaults() {
            var fake = new Faker<<#= dtoType.Namespace.Name #>.<#= dtoType.Name #>>()
            <#foreach(var property in FindProperties(dtoType.Members))
	        {
            if (property.Name == "Id") continue;
            if (property.Name.Contains("UserId")) continue;
            if (property.Name.Contains("CreatedBy")) continue;
            if (property.Name.Contains("LastUpdatedBy")) continue;
            if (property.Type.AsFullName.StartsWith("BddTodo") & !property.Type.AsFullName.Contains("Enum")) continue;
            if (property.Type.AsFullName.StartsWith("System.Collections.Generic.ICollection")) continue;
            if (property.Type.AsFullName.StartsWith("System.Collections.Generic.List")) continue;
            if (property.Type.AsFullName.Contains("XElement")) continue;
#>
                .RuleFor(o => o.<#=property.Name #>, f => <#=GetFakerBasedOnType(property) #>)
            <#
	        } /* foreach */#>;

            dto = fake;
        }

    <#foreach(var property in FindProperties(dtoType.Members))
	{#>	public <#= dtoType.Name #>Builder With<#=property.Name #>(<#=property.Type.AsFullName #> <#=AppendTextIfReservedWord(property.Name.ToLower()) #>)
		{
			dto.<#=property.Name #> = <#=AppendTextIfReservedWord(property.Name.ToLower()) #>;
			return this;
		}

	<#
		// If property is type of DTO then let's add With-method supporting nested building.
		if(dtoTypes.Any(dt => dt.Namespace.Name + "." + dt.Name == property.Type.AsFullName))
        {
			var builderType = property.Type.AsFullName.Substring(property.Type.AsFullName.LastIndexOf('.') + 1);
			#>

		public <#= dtoType.Name #>Builder With<#=property.Name #>(Action<<#=builderType #>Builder> <#=property.Name.ToLower() #>Builder)
		{
			var b = new <#=builderType #>Builder();
            <#=property.Name.ToLower() #>Builder.Invoke(b);
            dto.<#=property.Name #> = b.Build();
            return this;
		}
	<#

        } /* if */
	#><#
		// If property is List type then let's add With-method with params support
		if(property.Type.AsFullName.StartsWith("System.Collections.Generic.List"))
		{
			#>	
		public <#= dtoType.Name #>Builder With<#=property.Name #>(params <#=GetListedType(property) #>[] <#=property.Name.ToLower() #>)
		{
			dto.<#=property.Name #> = <#=property.Name.ToLower() #>.ToList();
			return this;
		}
	<#
		} /* if */
		
		// If property is List type then let's add With-method with params support
		if(property.Type.AsFullName.StartsWith("System.Collections.Generic.List"))
		{
			var builderType = GetListedType(property).Substring(GetListedType(property).LastIndexOf('.') + 1);

			#>	
		public <#= dtoType.Name #>Builder With<#=property.Name #>(params Action<<#=builderType #>Builder>[] builders)
		{
			var <#=property.Name.ToLower() #> = new <#=property.Type.AsFullName #>();

			foreach(var builder in builders)
            {
                var b = new <#=builderType #>Builder();
                builder.Invoke(b);
                <#=property.Name.ToLower() #>.Add(b.Build());
            }

            dto.<#=property.Name #>  = <#=property.Name.ToLower() #>;

			return this;
		}
	<#
		} /* if */
	} /* foreach */#>
}
<#}#>}
<#+

    public string GetFakerBasedOnType (EnvDTE.CodeProperty property)
    {
        //

        var propertyType = property.Type.AsFullName.ToLower();

        if (propertyType.Contains("enum")) 
        {
            if (property.Type.AsFullName.StartsWith("System.Nullable")) 
            {
                var startIndex = property.Type.AsFullName.IndexOf("<") + 1;
                return "f.PickRandom<" + property.Type.AsFullName.Substring(startIndex).Replace(">", "") + ">()";
            }
            return "f.PickRandom<" + property.Type.AsFullName + ">()";
        }

        if (propertyType.Contains("date"))
            return "f.Date.Recent()";

        if (propertyType.Contains("bool"))
            return "f.Random.Bool()";

        if (propertyType.Contains("system.byte[]"))
            return "f.Lorem.Word().EncryptToByteArray()";

        if (propertyType.Contains("guid"))
            return "Guid.NewGuid()";

        if (propertyType.Contains("byte"))
            return "f.Random.Byte()";

        if (propertyType.Contains("char"))
            return "f.Random.Char()";

        if (propertyType.Contains("decimal"))
            return "f.Random.Decimal()";

        if (propertyType.Contains("double"))
            return "f.Random.Double()";

        if (propertyType.Contains("float"))
            return "f.Random.Float()";

        if (propertyType.Contains("single"))
            return "f.Random.Float()";
			
		if (propertyType.Contains("point"))
            return "new Point(f.Person.Address.Geo.Lng, f.Person.Address.Geo.Lat) { SRID = 4326 }";

        if (propertyType.Contains("int"))
            return "f.Random.Int()";

        if (propertyType.Contains("string"))
        {
            var attr = property.Attributes.OfType<EnvDTE.CodeAttribute>().FirstOrDefault(a => a.Name.Contains("Length"));

            if (attr != null) {
                var length = Convert.ToInt32(attr.Value);
                if (length >= 4000)
                    return "f.Lorem.Paragraphs(80).Substring(0, " + attr.Value + ")";
                if (length >= 2000)
                    return "f.Lorem.Paragraphs(40).Substring(0, " + attr.Value + ")";
                if (length >= 1000)
                    return "f.Lorem.Paragraphs(20).Substring(0, " + attr.Value + ")";
                if (length >= 500)
                    return "f.Lorem.Paragraphs(10).Substring(0, " + attr.Value + ")";
                if (length >= 250)
                    return "f.Lorem.Paragraphs(7).Substring(0, " + attr.Value + ")";

                return "f.Lorem.Paragraphs(5).Substring(0, " + attr.Value + ")";
            }

            return "f.Lorem.Text()";
        }

        if (propertyType.Contains("datetime"))
             return "f.Date.Recent()";

        if (propertyType.Contains("timespan"))
             return "f.Date.Timespan(TimeSpan.FromHours(20))";

        return "\"XXXX\"";
    }

	public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<EnvDTE.ProjectItem>();
		
		if (items == null) return ret;
		
		foreach(EnvDTE.ProjectItem item in items)
		{
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}
		
		return ret;
	}

	public string GetListedType(EnvDTE.CodeProperty property)
    {
		return property.Type.AsFullName.Replace("System.Collections.Generic.List<", "").Replace(">","");
    }

	public EnvDTE.Project GetProjectContainingFile(string filename)
    {
		var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
		return visualStudio.Solution.FindProjectItem(filename).ContainingProject as EnvDTE.Project;
	}

	public List<EnvDTE.CodeClass> GetClassesOf(EnvDTE.Project project)
	{
		var items = GetProjectItemsRecursively(project.ProjectItems);

		var classes = new List<EnvDTE.CodeClass>();

		foreach(var item in items)
        {
			if(item.FileCodeModel != null)
            {
				foreach (EnvDTE.CodeElement element in item.FileCodeModel.CodeElements)
				{
					if (element is EnvDTE.CodeNamespace)
					{
						EnvDTE.CodeNamespace ns = (EnvDTE.CodeNamespace)element;
					
						foreach (EnvDTE.CodeElement elem in ns.Members)
						{
							if (elem is EnvDTE.CodeClass)
							{
                                //elem.
								classes.Add(elem as EnvDTE.CodeClass);
							}
						}
					}
				}
            }
        }        

		return classes;
	}

	public List<EnvDTE.CodeProperty> FindProperties(EnvDTE.CodeElements elements)
    {
        List<EnvDTE.CodeProperty> properties = new List<EnvDTE.CodeProperty>();
        
        foreach (EnvDTE.CodeElement element in elements)
        {
            EnvDTE.CodeProperty p = element as EnvDTE.CodeProperty;
        
            if (p != null)
                properties.Add(p);            
        }
    
        return properties;
    }

	public string AppendTextIfReservedWord(string s) 
	{
		if (_reservedWords.Contains(s)) return "my" + s;
		return s;
	}

	public List<string> _reservedWords = new List<string>
	{
		"abstract",
		"as",
		"base",
		"bool",
		"break",
		"byte",
		"case",
		"catch",
		"char",
		"checked",
		"class",
		"const",
		"continue",
		"decimal",
		"default",
		"delegate",
		"do",
		"double",
		"else",
		"enum",
		"event",
		"explicit",
		"extern",
		"FALSE",
		"finally",
		"fixed",
		"float",
		"for",
		"foreach",
		"goto",
		"if",
		"implicit",
		"in",
		"in",
		"int",
		"interface",
		"internal",
		"is",
		"lock",
		"long",
		"namespace",
		"new",
		"null",
		"object",
		"operator",
		"out",
		"out",
		"override",
		"params",
		"private",
		"protected",
		"public",
		"readonly",
		"ref",
		"return",
		"sbyte",
		"sealed",
		"short",
		"sizeof",
		"stackalloc",
		"static",
		"string",
		"struct",
		"switch",
		"this",
		"throw",
		"TRUE",
		"try",
		"typeof",
		"uint",
		"ulong",
		"unchecked",
		"unsafe",
		"ushort",
		"using",
		"using static",
		"virtual",
		"void",
		"volatile",
		"while"
	};
	#>